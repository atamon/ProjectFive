controller/Controller.java:2: * To change this template, choose Tools | Templates
controller/Controller.java:30:        this.view = view;
controller/Controller.java:31:        this.game = game;
controller/Controller.java:32:        this.inputManager = inpManager;
controller/Controller.java:35:        this.inputManager.clearMappings();
controller/Controller.java:38:        this.game.addPropertyChangeListener(view);
controller/Controller.java:49:        this.game.update(tpf);
controller/Controller.java:50:        this.view.update(tpf);
controller/keymaps/KeyPlayable.java:2: * To change this template, choose Tools | Templates
controller/keymaps/PlayerOneKeys.java:2: * To change this template, choose Tools | Templates
controller/keymaps/PlayerThreeKeys.java:2: * To change this template, choose Tools | Templates
controller/keymaps/PlayerTwoKeys.java:2: * To change this template, choose Tools | Templates
controller/keymaps/PlayerZeroKeys.java:2: * To change this template, choose Tools | Templates
controller/listeners/GlobalListener.java:2: * To change this template, choose Tools | Templates
controller/listeners/GlobalListener.java:25:        this.game = game;
controller/listeners/GlobalListener.java:26:        this.inpManager = inpManager;
controller/listeners/GlobalListener.java:31:        inpManager.addListener(this, "Pause");
controller/listeners/GlobalListener.java:32:        inpManager.addListener(this, "Start");
controller/listeners/JoinPlayerListener.java:2: * To change this template, choose Tools | Templates
controller/listeners/JoinPlayerListener.java:32:        this.game = game;
controller/listeners/JoinPlayerListener.java:33:        this.inpManager = inpManager;
controller/listeners/JoinPlayerListener.java:41:        this.setKeys(inpManager);
controller/listeners/JoinPlayerListener.java:49:            inpManager.addListener(this, "" + id);
controller/listeners/JoinPlayerListener.java:68:                this.game.createPlayer(id);
controller/listeners/JoinPlayerListener.java:69:                Player player = this.game.getPlayer(id);
controller/listeners/KeyFactory.java:2: * To change this template, choose Tools | Templates
controller/listeners/LeavePlayerListener.java:2: * To change this template, choose Tools | Templates
controller/listeners/LeavePlayerListener.java:32:        this.game = game;
controller/listeners/LeavePlayerListener.java:33:        this.inpManager = inpManager;
controller/listeners/LeavePlayerListener.java:41:        this.setKeys(inpManager);
controller/listeners/LeavePlayerListener.java:49:            inpManager.addListener(this, "leave" + id);
controller/listeners/LeavePlayerListener.java:66:                this.game.removePlayer(id);
controller/listeners/PlayerListener.java:2: * To change this template, choose Tools | Templates
controller/listeners/PlayerListener.java:27:        this.player = player;
controller/listeners/PlayerListener.java:28:        this.layout = KeyFactory.getPlayerKeys(player);
controller/listeners/PlayerListener.java:29:        this.game = game;
controller/listeners/PlayerListener.java:37:        inpManager.addListener(this, layout.getLeftMap());
controller/listeners/PlayerListener.java:38:        inpManager.addListener(this, layout.getRightMap());
controller/listeners/PlayerListener.java:39:        inpManager.addListener(this, layout.getUpMap());
controller/listeners/PlayerListener.java:40:        inpManager.addListener(this, layout.getLeftFireMap());
controller/listeners/PlayerListener.java:41:        inpManager.addListener(this, layout.getRightFireMap());
controller/listeners/PlayerListener.java:47:            if (name.equals(this.layout.getLeftFireMap())) {
controller/listeners/PlayerListener.java:48:                this.player.fireLeft();
controller/listeners/PlayerListener.java:51:            if (name.equals(this.layout.getRightFireMap())) {
controller/listeners/PlayerListener.java:52:                this.player.fireRight();
controller/listeners/PlayerListener.java:56:        if (name.equals(this.layout.getUpMap())) {
controller/listeners/PlayerListener.java:57:            this.player.accelerateUnit(isPressed);
controller/listeners/PlayerListener.java:60:        if (name.equals(this.layout.getLeftMap())) {
controller/listeners/PlayerListener.java:61:            this.player.steerUnitAntiClockWise(isPressed);
controller/listeners/PlayerListener.java:64:        if (name.equals(this.layout.getRightMap())) {
controller/listeners/PlayerListener.java:65:            this.player.steerUnitClockWise(isPressed);
controller/listeners/PlayerListener.java:73:            if (name.equals(this.layout.getLeftFireMap())) {
controller/listeners/PlayerListener.java:74:                this.player.increaseFirePowerLeft(value);
controller/listeners/PlayerListener.java:76:            if (name.equals(this.layout.getRightFireMap())) {
controller/listeners/PlayerListener.java:77:                this.player.increaseFirePowerRight(value);
main/Main.java:55:        this.width = settings.getWidth();
main/Main.java:56:        this.height = settings.getHeight();
main/Main.java:59:        this.setShowSettings(false);
main/Main.java:60:        this.setSettings(settings);
main/Main.java:61:        this.start();
main/Main.java:78:        this.game = new Game();
main/Main.java:79:        this.view = new View(this, game, width, height, niftyDisplay);
main/Main.java:80:        this.controller = new Controller(this.getInputManager(), view, game);
main/Main.java:83:        this.setDisplayStatView(false);
math/Direction.java:2: * To change this template, choose Tools | Templates
math/Direction.java:21:        this.steeringClockWise = bool;
math/Direction.java:25:        this.steeringAntiClockWise = bool;
math/Direction.java:45:        if (this.steeringClockWise != other.steeringClockWise) {
math/Direction.java:48:        if (this.steeringAntiClockWise != other.steeringAntiClockWise) {
math/Direction.java:57:        hash = 53 * hash + (this.steeringClockWise ? 1 : 0);
math/Direction.java:58:        hash = 53 * hash + (this.steeringAntiClockWise ? 1 : 0);
math/MonkeyConverter.java:2: * To change this template, choose Tools | Templates
math/Vector.java:12:    // We need a constant to define a vector that does not exist in this universe(-e +ity).
math/Vector.java:25:        this.x = x;
math/Vector.java:26:        this.y = y;
math/Vector.java:27:        this.z = z;
math/Vector.java:35:        this.x = v.getX();
math/Vector.java:36:        this.y = v.getY();
math/Vector.java:37:        this.z = v.getZ();
math/Vector.java:45:        return this.x;
math/Vector.java:53:        return this.y;
math/Vector.java:61:        return this.z;
math/Vector.java:69:        this.x = x;
math/Vector.java:77:        this.y = y;
math/Vector.java:85:        this.z = z;
math/Vector.java:89:     * Adds another vector to this
math/Vector.java:93:        this.x += vec.getX();
math/Vector.java:94:        this.y += vec.getY();
math/Vector.java:95:        this.z += vec.getZ();
math/Vector.java:99:     * Multiplies another vector to this
math/Vector.java:103:        this.x = this.x*vec.getX();
math/Vector.java:104:        this.y = this.y*vec.getY();
math/Vector.java:105:        this.z = this.z*vec.getZ();
math/Vector.java:109:     * Multiplies a number to this
math/Vector.java:113:        this.x = this.x*number;
math/Vector.java:114:        this.y = this.y*number;
math/Vector.java:115:        this.z = this.z*number;
math/Vector.java:124:            float length = this.getLength();
math/Vector.java:125:            this.x = this.x/length;
math/Vector.java:126:            this.y = this.y/length;
math/Vector.java:127:            this.z = this.z/length;
math/Vector.java:128:            if(this.getLength() != 1){
math/Vector.java:129:                this.normalize();
math/Vector.java:142:        return (float) Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);
math/Vector.java:151:        float orgX = this.x;
math/Vector.java:152:        this.x = (float)( Math.cos(radian)*x - Math.sin(radian)*y);
math/Vector.java:153:        this.y = (float)( Math.sin(radian)*orgX + Math.cos(radian)*y);
math/Vector.java:162:        return "X = " + this.x + ", Y = " + this.y + ", Z = " + this.z;
math/Vector.java:166:     * Checks if another Vector equals this Vector.
math/Vector.java:173:        if(obj == null || obj.getClass() != this.getClass()) {
math/Vector.java:177:        return this.x == v.getX() && this.y == v.getY() && this.z == v.getZ();
math/Vector.java:183:        hash = 53 * hash + Float.floatToIntBits(this.x);
math/Vector.java:184:        hash = 53 * hash + Float.floatToIntBits(this.y);
math/Vector.java:185:        hash = 53 * hash + Float.floatToIntBits(this.z);
model/Game.java:25:    // A game is never startable without 2 players at this point
model/Game.java:31:    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
model/Game.java:43:     * rounds and keeps track of player-score and rules set for this game and
model/Game.java:52:        this.battlefield = battlefield;
model/Game.java:53:        this.itemFactory = new ItemFactory();
model/Game.java:54:        this.roundModel = new SimpleRoundModel();
model/Game.java:55:        this.playerModel = new PiratePlayerModel(battlefield);
model/Game.java:62:        this(new Battlefield());
model/Game.java:66:        return this.gameState;
model/Game.java:74:        return this.battlefield.getCenter();
model/Game.java:91:            this.battlefield.update(tpf);
model/Game.java:92:            this.itemTimeout -= tpf;
model/Game.java:94:                this.createItem();
model/Game.java:95:                this.itemTimeout = 10f;
model/Game.java:111:            bottle = this.itemFactory.createNewItem(this.getBattlefieldSize());
model/Game.java:113:        this.battlefield.addToBattlefield(bottle);
model/Game.java:190:        RoundState roundState = this.getRoundState();
model/Game.java:193:            if (this.getRoundState() == RoundState.PAUSED) {
model/Game.java:221:        // TODO Add real GUI-listeners to this.
model/Game.java:258:        this.pcs.addPropertyChangeListener(pl);
model/Game.java:263:        this.pcs.addPropertyChangeListener(pl);
model/GameState.java:2: * To change this template, choose Tools | Templates
model/GameState.java:19:        this.state = state;
model/IGame.java:2: * To change this template, choose Tools | Templates
model/ItemFactory.java:2: * To change this template, choose Tools | Templates
model/ItemFactory.java:33:        final int randNumber = (int)(Math.random()*this.powerUps.size());
model/PiratePlayerModel.java:2: * To change this template, choose Tools | Templates
model/PiratePlayerModel.java:25:    // A game is never startable without 2 players at this setVelocity
model/PiratePlayerModel.java:31:    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
model/PiratePlayerModel.java:34:        this.battlefield = battlefield;
model/PiratePlayerModel.java:53:        Player player = this.playerMap.get(playerID);
model/PiratePlayerModel.java:68:        this.playerMap.put(id, player);
model/PiratePlayerModel.java:80:        this.battlefield.addToBattlefield(unit);
model/PiratePlayerModel.java:83:        this.pcs.firePropertyChange("Player Created", null, player);
model/PiratePlayerModel.java:87:        Unit unit = this.playerMap.get(id).getUnit();
model/PiratePlayerModel.java:100:            this.placeUnit(player.getId(),
model/PiratePlayerModel.java:115:        this.pcs.addPropertyChangeListener(pl);
model/PiratePlayerModel.java:119:        this.pcs.removePropertyChangeListener(pl);
model/PlayerModel.java:2: * To change this template, choose Tools | Templates
model/player/Player.java:24:            this.add(Color.CYAN);    // 0
model/player/Player.java:25:            this.add(Color.MAGENTA); // 1
model/player/Player.java:26:            this.add(Color.ORANGE);  // 2
model/player/Player.java:27:            this.add(Color.PINK);    // 3
model/player/Player.java:34:    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
model/player/Player.java:43:        this.playerId = playerID;
model/player/Player.java:44:        this.color = (PLAYER_COLORS.size() >= playerID) ? // player should be created with any id
model/player/Player.java:50:        return this.color;
model/player/Player.java:59:        return this.playerUnit;
model/player/Player.java:69:            this.playerUnit = boat;
model/player/Player.java:106:        this.fire(ballDirection, firePowerLeft);
model/player/Player.java:114:        this.fire(ballDirection, firePowerRight);
model/player/Player.java:122:        CannonBall cBall = new CannonBall(this.getCannonBallPos(direction),
model/player/Player.java:126:                (float) (Settings.getInstance().getSetting("cannonBallSpeed")) * firePower, this.playerUnit);
model/player/Player.java:128:        this.pcs.firePropertyChange("CannonBall Created", null, cBall);
model/player/Player.java:129:        this.playerUnit.reload(Settings.getInstance().getSetting("fireDelay"));
model/player/Player.java:142:     * Accelerates this player's unit.
model/player/Player.java:147:        if (this.playerUnit != null) {
model/player/Player.java:148:            this.playerUnit.setIsAccelerating(accelUp);
model/player/Player.java:159:        if (this.playerUnit != null) {
model/player/Player.java:160:            this.playerUnit.steerClockWise(bool);
model/player/Player.java:165:        if (this.playerUnit != null) {
model/player/Player.java:166:            this.playerUnit.steerAntiClockWise(bool);
model/player/Player.java:176:        return this.playerId;
model/player/Player.java:184:        this.playerUnit.addPropertyChangeListener(pl);
model/player/Player.java:188:        this.playerUnit.removePropertyChangeListener(pl);
model/player/Player.java:193:        if (this.playerUnit != null) {
model/player/Player.java:194:            return "Player: " + this.playerId + " Unit: " + this.playerUnit.toString();
model/player/Player.java:196:            return "Player: " + this.playerId + " Unit: NONE";
model/player/Player.java:209:        if (this.playerId != other.playerId) {
model/player/Player.java:212:        if (this.playerUnit != other.playerUnit && (this.playerUnit == null || !this.playerUnit.equals(other.playerUnit))) {
model/player/Player.java:221:        hash = 73 * hash + this.playerId;
model/player/Player.java:222:        hash = 73 * hash + (this.playerUnit != null ? this.playerUnit.hashCode() : 0);
model/player/Player.java:227:        this.pcs.addPropertyChangeListener(pcl);
model/player/Player.java:231:        this.pcs.removePropertyChangeListener(pcl);
model/powerup/AbstractPowerUp.java:2: * To change this template, choose Tools | Templates
model/powerup/AbstractPowerUp.java:31:        this.lifeTime = that.getLifeTime();
model/powerup/AbstractPowerUp.java:32:        this.maxSpeed = that.getMaxSpeed();
model/powerup/AbstractPowerUp.java:33:        this.acceleration = that.getAcceleration();
model/powerup/AbstractPowerUp.java:34:        this.retardation = that.getRetardation();
model/powerup/AbstractPowerUp.java:35:        this.steerAngle = that.getSteerAngle();
model/powerup/AbstractPowerUp.java:36:        this.hitPoints = that.getHitPoints();
model/powerup/AbstractPowerUp.java:37:        this.hitPointsMax = that.getHitPointsMax();
model/powerup/AbstractPowerUp.java:38:        this.damage = that.getDamage();
model/powerup/AbstractPowerUp.java:87:        this.active = active;
model/powerup/PUDrunk.java:2: * To change this template, choose Tools | Templates
model/powerup/PUDrunk.java:24:        this.steerAngle = -Settings.getInstance().getSetting("steerAngle")*2;
model/powerup/PUDrunk.java:25:        this.lifeTime = 10;
model/powerup/PUDrunk.java:30:            this.active = false;
model/powerup/PUDrunk.java:32:            this.lifeTime -= tpf;
model/powerup/PUDrunk.java:37:        return this.message;
model/powerup/PUDrunk.java:41:        return this.name;
model/powerup/PUDrunk.java:46:        return new PUDrunk(this);
model/powerup/PUEmpty.java:2: * To change this template, choose Tools | Templates
model/powerup/PUEmpty.java:35:        return new PUEmpty(this);
model/powerup/PUHealth.java:2: * To change this template, choose Tools | Templates
model/powerup/PUHealth.java:20:        this.hitPoints = Settings.getInstance().getSetting("hitPointsMax");
model/powerup/PUHealth.java:32:        return this.message;
model/powerup/PUHealth.java:36:        return this.name;
model/powerup/PUHealth.java:41:        return new PUHealth(this);
model/powerup/PUSpeed.java:14:        this.maxSpeed = 20;
model/powerup/PUSpeed.java:15:        this.acceleration = 10000;
model/powerup/PUSpeed.java:16:        this.lifeTime = 10;
model/powerup/PUSpeed.java:25:            this.active = false;
model/powerup/PUSpeed.java:27:            this.lifeTime -= tpf;
model/powerup/PUSpeed.java:32:        return this.message;
model/powerup/PUSpeed.java:36:        return this.name;
model/powerup/PUSpeed.java:41:        return new PUSpeed(this);
model/powerup/PUTurn.java:2: * To change this template, choose Tools | Templates
model/powerup/PUTurn.java:19:        this.steerAngle = 3;
model/powerup/PUTurn.java:20:        this.lifeTime = 10;
model/powerup/PUTurn.java:29:            this.active = false;
model/powerup/PUTurn.java:31:            this.lifeTime -= tpf;
model/powerup/PUTurn.java:36:        return this.message;
model/powerup/PUTurn.java:40:        return this.name;
model/powerup/PUTurn.java:45:        return new PUTurn(this);
model/round/Round.java:15:     * Starts this round.
model/round/Round.java:22:        this.roundState = RoundState.PLAYING;
model/round/Round.java:34:        this.winner = winner;
model/round/Round.java:35:        this.roundState = RoundState.POST;
model/round/Round.java:42:        this.roundState = RoundState.PAUSED;
model/round/Round.java:50:        this.roundState = RoundState.PLAYING;
model/round/Round.java:67:        return this.roundState;
model/round/RoundAlreadyEndedException.java:2: * To change this template, choose Tools | Templates
model/round/RoundAlreadyStartedException.java:2: * To change this template, choose Tools | Templates
model/round/RoundModel.java:2: * To change this template, choose Tools | Templates
model/round/RoundState.java:2: * To change this template, choose Tools | Templates
model/round/RoundState.java:20:        this.state = state;
model/round/SimpleRoundModel.java:2: * To change this template, choose Tools | Templates
model/round/WinnerNotFoundException.java:2: * To change this template, choose Tools | Templates
model/settings/SettingNotFoundException.java:2: * To change this template, choose Tools | Templates
model/settings/Settings.java:2: * To change this template, choose Tools | Templates
model/settings/SettingsLoader.java:2: * To change this template, choose Tools | Templates
model/settings/SettingsLoader.java:75:        // Try to validate the heck out of this string
model/visual/Battlefield.java:29:        this(new Vector(100.0f, 1.0f, 100.0f));
model/visual/Battlefield.java:41:            this.size = new Vector(size);
model/visual/Battlefield.java:47:        physHandler.createGround(this.size, this);
model/visual/Battlefield.java:58:        mov.addPropertyChangeListener(this);
model/visual/Battlefield.java:59:        this.moveables.add(mov);
model/visual/Battlefield.java:63:        this.physHandler.removeFromWorld(mov.getPhysicalObject());
model/visual/Battlefield.java:64:        mov.removePropertyChangeListener(this);
model/visual/Battlefield.java:74:            if (next.getClass() == Unit.class && this.isOutOfBounds(next.getPosition())) {
model/visual/Battlefield.java:75:                this.doMagellanJourney(next);
model/visual/Battlefield.java:78:        this.physHandler.update(tpf);
model/visual/Battlefield.java:84:        Iterator<IMoveable> iterator  = this.removeBuffer.iterator();
model/visual/Battlefield.java:87:            this.removeFromBattlefield(next);
model/visual/Battlefield.java:89:        this.removeBuffer.clear();
model/visual/Battlefield.java:112:        return this.size;
model/visual/Battlefield.java:116:        return new Vector(this.pos);
model/visual/Battlefield.java:121:                || position.getX() > this.size.getX()
model/visual/Battlefield.java:123:                || position.getZ() > this.size.getZ();
model/visual/Battlefield.java:127:        final Iterator<IMoveable> iterator = this.moveables.iterator();
model/visual/Battlefield.java:145:        return new Vector(this.size.getX() / 2, this.size.getY(), this.size.getZ() / 2);
model/visual/Battlefield.java:163:        if (this.size != other.size && (this.size == null || !this.size.equals(other.size))) {
model/visual/Battlefield.java:166:        if (this.pos != other.pos && (this.pos == null || !this.pos.equals(other.pos))) {
model/visual/Battlefield.java:175:        hash = 37 * hash + (this.size != null ? this.size.hashCode() : 0);
model/visual/Battlefield.java:176:        hash = 37 * hash + (this.pos != null ? this.pos.hashCode() : 0);
model/visual/Battlefield.java:188:            this.addToBattlefield(cb);
model/visual/Battlefield.java:193:            this.removeBuffer.add(cb);
model/visual/Battlefield.java:198:            this.removeBuffer.add(bottle);
model/visual/Bottle.java:2: * To change this template, choose Tools | Templates
model/visual/Bottle.java:25:        super.setBody(new PhysicalItem(this, position, pointingDir, size, mass));
model/visual/Bottle.java:32:        this.pcs.firePropertyChange("Bottle Removed", null, this);
model/visual/Bottle.java:36:        return this.lifeTime;
model/visual/Bottle.java:41:        this.lifeTime -= tpf;
model/visual/Bottle.java:42:        if (this.lifeTime <= 0) {
model/visual/Bottle.java:43:            this.announceRemoval();
model/visual/CannonBall.java:2: * To change this template, choose Tools | Templates
model/visual/CannonBall.java:39:        this.body = new PhysicalCannonBall(this, position, direction, size, mass, speed);
model/visual/CannonBall.java:41:        this.pcs = super.getPropertyChangeSupport();
model/visual/CannonBall.java:42:        this.owner = owner;
model/visual/CannonBall.java:63:        this.pcs.firePropertyChange("CannonBall Removed", null, this);
model/visual/CannonBall.java:67:        return this.owner;
model/visual/IMoveable.java:2: * To change this template, choose Tools | Templates
model/visual/Item.java:2: * To change this template, choose Tools | Templates
model/visual/Item.java:31:        this.powerUp = powerUp;        
model/visual/Item.java:35:     * Returns the power-up of this Item.
model/visual/Item.java:40:        return this.powerUp; // immutable class => no copy necessary 
model/visual/Item.java:46:            this.announceRemoval();
model/visual/Item.java:60:        if (this.powerUp != other.powerUp && (this.powerUp == null || !this.powerUp.equals(other.powerUp))) {
model/visual/Item.java:69:        hash = 43 * hash + (this.powerUp != null ? this.powerUp.hashCode() : 0);
model/visual/Molotov.java:2: * To change this template, choose Tools | Templates
model/visual/MoveableAbstract.java:2: * To change this template, choose Tools | Templates
model/visual/MoveableAbstract.java:23:    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
model/visual/MoveableAbstract.java:33:        this.body.place(pos);
model/visual/MoveableAbstract.java:44:        this.setPosition(new Vector(x, y, z));
model/visual/MoveableAbstract.java:48:        this.body = body;
model/visual/MoveableAbstract.java:68:        return this.pcs;
model/visual/MoveableAbstract.java:75:        return this.acceleration;
model/visual/MoveableAbstract.java:83:        return this.maxSpeed;
model/visual/MoveableAbstract.java:100:        this.maxSpeed = (int)speed;
model/visual/MoveableAbstract.java:125:        if (Float.floatToIntBits(this.maxSpeed) != Float.floatToIntBits(other.maxSpeed)) {
model/visual/MoveableAbstract.java:128:        if (this.body != other.body && (this.body == null || !this.body.equals(other.body))) {
model/visual/MoveableAbstract.java:137:        hash = 59 * hash + Float.floatToIntBits(this.maxSpeed);
model/visual/MoveableAbstract.java:138:        hash = 59 * hash + (this.body != null ? this.body.hashCode() : 0);
model/visual/MoveableAbstract.java:149:        this.pcs.addPropertyChangeListener(ls);
model/visual/MoveableAbstract.java:153:        this.pcs.removePropertyChangeListener(ls);
model/visual/MoveableAbstract.java:157:        return this.body;
model/visual/StatusBox.java:2: * To change this template, choose Tools | Templates
model/visual/StatusBox.java:26:            this(STATUS_MESSAGE_COLOR, message);
model/visual/StatusBox.java:30:            this.color = messageColor;
model/visual/StatusBox.java:31:            this.message = message;
model/visual/StatusBox.java:36:            return this.message;
model/visual/StatusBox.java:39:            return this.color;
model/visual/StatusBox.java:43:    private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
model/visual/StatusBox.java:57:        this.message(STATUS_MESSAGE_COLOR, message);
model/visual/StatusBox.java:62:            this.messages.add(new Message(messageColor, message));
model/visual/StatusBox.java:63:            this.pcs.firePropertyChange("StatusBox Message", null, this.messages);
model/visual/StatusBox.java:67:        this.messages.clear();
model/visual/StatusBox.java:68:        this.pcs.firePropertyChange("StatusBox Cleared", null, this.messages);
model/visual/StatusBox.java:73:            this.pcs.firePropertyChange("StatusBox Visible", null, null);
model/visual/StatusBox.java:75:            this.pcs.firePropertyChange("StatusBox Hidden", null, null);
model/visual/StatusBox.java:88:        return this.messages;
model/visual/Unit.java:46:        this.body = new PhysicalUnit(this, pos, dir, size, mass);
model/visual/Unit.java:48:        this.pcs = super.getPropertyChangeSupport();
model/visual/Unit.java:61:            this.accelerate(this.isAccelerating, tpf);
model/visual/Unit.java:62:            this.steer(tpf);
model/visual/Unit.java:64:        if (this.powerUp != null) {
model/visual/Unit.java:66:                this.powerUp.update(tpf);
model/visual/Unit.java:68:                this.removePowerUp();
model/visual/Unit.java:71:        this.isUpsideDown();
model/visual/Unit.java:72:        this.fireDelay = fireDelay <= 0 ? 0 : fireDelay - tpf;
model/visual/Unit.java:82:            this.body.accelerate(tpf);
model/visual/Unit.java:93:        this.setHitPoints(hitPoints - damage);
model/visual/Unit.java:102:        if (this.getSpeed() <= 0) {
model/visual/Unit.java:106:        if (this.getSpeed() > MAX_STEER_SPEED) {
model/visual/Unit.java:107:            return this.getSteerAngle();
model/visual/Unit.java:110:        return this.getSpeed() * this.getSteerAngle() / MAX_STEER_SPEED;
model/visual/Unit.java:120:        this.steerAngle = steerAngle;
model/visual/Unit.java:124:        return this.steerAngle;
model/visual/Unit.java:128:        this.steerDirection.steerClockWise(bool);
model/visual/Unit.java:132:        this.steerDirection.steerAntiClockWise(bool);
model/visual/Unit.java:140:        this.isAccelerating = value;
model/visual/Unit.java:151:        if (hitPoints > this.hitPointsMax) {
model/visual/Unit.java:152:            this.hitPoints = this.hitPointsMax;
model/visual/Unit.java:154:            this.hitPoints = hitPoints;
model/visual/Unit.java:163:        return this.hitPoints;
model/visual/Unit.java:171:        return this.hitPointsMax;
model/visual/Unit.java:184:        this.pcs.firePropertyChange("Unit removed", null, null);
model/visual/Unit.java:190:            this.hitPoints -= Math.abs(objImpactSpeed / hullStrength);
model/visual/Unit.java:198:            this.hitPoints -= damage;
model/visual/Unit.java:205:     * @param obj Must be == this to be equal
model/visual/Unit.java:206:     * @return Returns true if obj is the same as this.
model/visual/Unit.java:210:        return this == obj;
model/visual/Unit.java:216:        hash = 23 * hash + Float.floatToIntBits(this.steerAngle);
model/visual/Unit.java:217:        hash = 23 * hash + this.hitPointsMax;
model/visual/Unit.java:218:        hash = 23 * hash + this.hitPoints;
model/visual/Unit.java:219:        hash = 23 * hash + Float.floatToIntBits(this.hullStrength);
model/visual/Unit.java:220:        hash = 23 * hash + (this.isAccelerating ? 1 : 0);
model/visual/Unit.java:221:        hash = 23 * hash + (this.steerDirection != null ? this.steerDirection.hashCode() : 0);
model/visual/Unit.java:222:        hash = 23 * hash + (this.powerUp != null ? this.powerUp.hashCode() : 0);
model/visual/Unit.java:227:        return this.powerUp;
model/visual/Unit.java:231:        this.removePowerUp(); //remove old powerUp before adding a new one
model/visual/Unit.java:232:        this.powerUp = power;
model/visual/Unit.java:233:        this.hitPointsMax += powerUp.getHitPointsMax();
model/visual/Unit.java:234:        this.setHitPoints(this.getHitPoints() + powerUp.getHitPoints());
model/visual/Unit.java:235:        this.acceleration += powerUp.getAcceleration();
model/visual/Unit.java:236:        this.setMaxSpeed(this.getMaxSpeed() + powerUp.getMaxSpeed());
model/visual/Unit.java:237:        this.setSteerAngle(this.getSteerAngle() + powerUp.getSteerAngle());
model/visual/Unit.java:241:        this.hitPointsMax -= powerUp.getHitPointsMax();
model/visual/Unit.java:242:        this.acceleration -= powerUp.getAcceleration();
model/visual/Unit.java:243:        this.maxSpeed -= powerUp.getMaxSpeed();
model/visual/Unit.java:244:        this.steerAngle -= powerUp.getSteerAngle();
model/visual/Unit.java:245:        this.powerUp = new PUEmpty();
model/visual/Unit.java:253:        this.fireDelay = delay;
model/visual/Unit.java:265:        System.out.println(this.body.getBody().getPhysicsRotation());
observable/IObservable.java:2: * To change this template, choose Tools | Templates
physics/IPhysicalBody.java:2: * To change this template, choose Tools | Templates
physics/IPhysicsHandler.java:2: * To change this template, choose Tools | Templates
physics/JMEPhysicsHandler.java:31:        this.bulletAppState = new BulletAppState();
physics/JMEPhysicsHandler.java:32:        this.bulletAppState.initialize(null, null);
physics/JMEPhysicsHandler.java:33:        this.bulletAppState.getPhysicsSpace().addCollisionListener(this);
physics/JMEPhysicsHandler.java:45:        this.ground = new PhysicsRigidBody(new BoxCollisionShape(MonkeyConverter.convertToMonkey3D(size).mult(0.5f)), 0);
physics/JMEPhysicsHandler.java:54:        this.rigidBodies.add(body);
physics/JMEPhysicsHandler.java:55:        this.bulletAppState.getPhysicsSpace().addCollisionObject(body);
physics/JMEPhysicsHandler.java:59:        this.bulletAppState.getPhysicsSpace().removeCollisionObject(object.getBody());
physics/JMEPhysicsHandler.java:64:        this.bulletAppState.getPhysicsSpace().update(tpf);
physics/JMEPhysicsHandler.java:65:        this.bulletAppState.update(tpf);
physics/PhysicalAbstractBody.java:2: * To change this template, choose Tools | Templates
physics/PhysicalAbstractBody.java:27:    private PropertyChangeSupport pcs = new PropertyChangeSupport(this);
physics/PhysicalAbstractBody.java:39:        this.owner = owner;
physics/PhysicalAbstractBody.java:40:        this.initSize = correctSize;
physics/PhysicalCannonBall.java:2: * To change this template, choose Tools | Templates
physics/PhysicalItem.java:2: * To change this template, choose Tools | Templates
physics/PhysicalUnit.java:2: * To change this template, choose Tools | Templates
view/BlenderImporter.java:2: * To change this template, choose Tools | Templates
view/BlenderImporter.java:42:        // Use this to correct the ambient color not correctly imported from Blender
view/GUIController.java:2: * To change this template, choose Tools | Templates
view/GUIController.java:47:        this.game = game;
view/GUIController.java:48:        this.rootNode = jme3.getRootNode();
view/GUIController.java:51:        StatusBox.getInstance().addPropertyChangeListener(this);
view/GUIController.java:117:        // Since this is done only a few times per game no need to optimize resources
view/GUIController.java:129:            // Since this happens on every message update. maybe just add latest and remove oldest if limit reached
view/GUIController.java:131:            List<Element> output = this.nifty.getScreen("HUD").findElementByName("info").getElements();
view/GUIController.java:142:            List<Element> output = this.nifty.getScreen("HUD").findElementByName("info").getElements();
view/GUIController.java:150:            this.nifty.getScreen("HUD").findElementByName("info").setVisible(true);
view/GUIController.java:153:            this.nifty.getScreen("HUD").findElementByName("info").setVisible(false);
view/GraphicalAbstract.java:2: * To change this template, choose Tools | Templates
view/GraphicalAbstract.java:19:        this.node = node;
view/GraphicalAbstract.java:23:        return this.node;
view/GraphicalAbstract.java:27:        this.node.setLocalTranslation(pos);
view/GraphicalAbstract.java:31:        this.node.setLocalRotation(rot);
view/GraphicalBattlefield.java:2: * To change this template, choose Tools | Templates
view/GraphicalBattlefield.java:36:        this.groundGeometry.setLocalTranslation(position);
view/GraphicalBattlefield.java:40:        return this.groundGeometry;
view/GraphicalBottle.java:2: * To change this template, choose Tools | Templates
view/GraphicalBottle.java:31:        this.node = blenderModel;
view/GraphicalBottle.java:32:        this.updatePosition(pos);
view/GraphicalBottle.java:38:            this.updatePosition((Vector3f)pce.getOldValue());
view/GraphicalBottle.java:39:            this.updateRotation((Quaternion)pce.getNewValue());
view/GraphicalBottle.java:41:        if("Bottle Removed".equals(pce.getPropertyName()) && this.node.getParent() != null) {
view/GraphicalBottle.java:42:            this.node.getParent().detachChild(node);
view/GraphicalCannonBall.java:2: * To change this template, choose Tools | Templates
view/GraphicalCannonBall.java:35:        this.assetManager = assetManager;
view/GraphicalCannonBall.java:43:        this.node = new Node();
view/GraphicalCannonBall.java:44:        this.node.attachChild(ballGeo);
view/GraphicalCannonBall.java:45:        this.updatePosition(pos);
view/GraphicalCannonBall.java:50:            this.updatePosition((Vector3f)pce.getOldValue());
view/GraphicalCannonBall.java:51:            this.updateRotation((Quaternion)pce.getNewValue());
view/GraphicalCannonBall.java:53:        if("CannonBall Removed".equals(pce.getPropertyName()) && this.node.getParent() != null) {
view/GraphicalCannonBall.java:54:            this.node.getParent().detachChild(node);
view/GraphicalUnit.java:2: * To change this template, choose Tools | Templates
view/GraphicalUnit.java:30:        this.node = blenderModel;
view/GraphicalUnit.java:36:        Node boatModelNode = (Node) this.node.getChild(0);
view/View.java:50:        this.jme3 = jme3;
view/View.java:51:        this.game = game;
view/View.java:52:        this.assetManager = jme3.getAssetManager();
view/View.java:53:        this.rootNode = jme3.getRootNode();
view/View.java:56:        this.createScene();
view/View.java:83:        initGround(this.game.getBattlefieldSize(), this.game.getBattlefieldPosition());
view/View.java:109:        cam.setLocation(new Vector3f(this.game.getBattlefieldCenter().getX(), 110, 0));
view/View.java:110:        cam.lookAt(MonkeyConverter.convertToMonkey3D(this.game.getBattlefieldCenter()).setZ(42), Vector3f.UNIT_Y);
view/View.java:161:        this.game.addUnitListener(playerID, gUnit);
view/View.java:177:        this.createGraphicalUnit(playerID, pos, dir, size, color);
view/View.java:180:        player.addPropertyChangeListener(this);
view/View.java:204:                MonkeyConverter.convertToMonkey3D(cannonBall.getSize()), this.assetManager,
view/View.java:214:                this.assetManager, blenderBottle.clone(true));
